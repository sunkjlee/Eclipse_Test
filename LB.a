package com.gnew.bat.main;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import com.gnew.bat.conf.Conf;
import com.gnew.bat.dbms.LauncherDbProc;
import com.gnew.bat.log.Loger;

public class LauncherBatch {

	private static final String DEFAULT_CONF_FILE = "./conf/conf.properties";
	private static final String RUN = "RUN";
	private static final String STANDBY = "STANDBY";
	private static final String ACTIVATED = "ACTIVATED";
	private static final String EXIT = "1";
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Map<String,Object> mainArgs = new HashMap<String, Object>();
		
		try {
//			System.out.println("<<< ENC/DEC BATCH START >>>>>>>>>>>>\n");
			
//			[실행 파일명] [conf파일 path] [0:전체 1:single] 
			// 1.>>>>> start load config 
			for (int i =1; i<args.length; i++) {
				 switch (i) {
				 	case 0: 
		            	mainArgs.put("conf", DEFAULT_CONF_FILE);
		            	mainArgs.put("pgNm", args[i]);
//		            	System.out.println("pgNm: " + args[i]);
		            	break;
		            case 1: 
		            	mainArgs.put("conf", args[i]);
//		            	System.out.println("conf: " + args[i]);
		            	break;
		            default:
		            	mainArgs.put("conf", DEFAULT_CONF_FILE);
		            	break; 
				 }
			 }
			
			if (mainArgs.get("conf") == null ) {
				 mainArgs.put("conf",  DEFAULT_CONF_FILE);
			}
				  
			Conf.init(mainArgs.get("conf").toString());
			if (Conf.confValidCheck() == false) {
				exitBat();
			}
			// 1. >>>> End load Config 
			
			// 2. >>>> logger init
			Loger.init();
			Loger.info("<<<<<<<<<<<< LAUNCHER BATCH START >>>>>>>>>>>>>");
			Loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>");
			
			// 2.>>>>> start db Select
			Map<String,Object> mDbInfo = new HashMap<String, Object>();
			mDbInfo.put("jdbcUrl", Conf.url);
			mDbInfo.put("dbId", Conf.dbId);
			mDbInfo.put("dbPwd", Conf.dbPwd);
			
			LauncherDbProc launcherDbProc = new LauncherDbProc();
			launcherDbProc.dbConn(mDbInfo);
		
			while(!false){
				// db연결이 conn check.. re-connect
				if (launcherDbProc.conn.isClosed()==true) {
					launcherDbProc.dbConn(mDbInfo);
				}
				
				// 실행 토큰을 가진 
				Map<String, Object> mapRunMode = launcherDbProc.detectModuleState();
				
				String runMode ="";
				runMode = (String) mapRunMode.get("runMode");

				// 조회 결과가 구동이면
				switch (runMode) {
					case RUN:
						//  detect중인 상대 프로세스가 죽은 경우..내 프로세스가 기동
						if (launcherDbProc.updateToDetectModuleForStandby() == true) {
							runProcess(Conf.binPath, Conf.decpBatFile);
							launcherDbProc.updateToMyModuleForActive();
						}
						break ;
					case STANDBY:
						// RUN_MODE 가 STANDBY 일경우는  상대방이 잘 동작 하고 있는 유지 상태 ..
						// 이 경우 나는 그냥 대기만 하면 된다. 
						break ;
					case ACTIVATED:
						// RUN_MODE ACTIVATED이면 현재 내가 ACTIVE모드인 상태- 나는 상태방을 모니터링 할 필요 없이 상대방만 나를 보면 됨.
						// 배치 수행
						runProcess(Conf.binPath, Conf.decpBatFile);
						launcherDbProc.updateToMyModuleForActive();
						break ;
					default:
						break;
				}
				
				Conf.getExitChkVal(mainArgs.get("conf").toString());
				Loger.info("getExitChkVal : " + Conf.launcherExitChk);
				if (Conf.launcherExitChk.equals(EXIT)) {
					Loger.logPrint("[Exit-intercept] getExitChkVal= " +  Conf.launcherExitChk + " break..");
				   break;
				}
				Thread.sleep(Conf.launcherSleepSec * 1000); //1초 대기
			}
			
			launcherDbProc.dbConnClose(LauncherDbProc.conn);
			exitBat();
		} catch (Exception ex) {
			if (Loger.isErrorable()) {
				//ERR_TYPE별 처리
				Loger.error("main - ", ex);
			}else {
				// conf.path err.. log file err
				System.out.println("[Exception]Config File not Founded~~~\n");
				System.out.println("[Exception]Config File path : "+ mainArgs.get("conf").toString() + "\n");
			}
		} 
		exitBat();
	}
	
	
	private static void runProcess(String path, String fileNm) {
		ProcessBuilder processBuilder = null;
		Process process = null;
//		ProcessBuilder processBuilder = new ProcessBuilder(command);
		
		try {
			String osType = System.getProperty("os.name").toLowerCase();
		    String filePath = path + File.separator + fileNm ;

		    if (osType.contains("win")) {
		    	processBuilder = new ProcessBuilder("CMD", "/c", filePath);
		    }else {
		    	processBuilder = new ProcessBuilder("sh",filePath);
		    }
		    
		    processBuilder.redirectErrorStream(true);
		    process = processBuilder.start();
		     
//		    BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
//		    String line = null;
//		     
//		    while ((line = br.readLine() ) != null) {
//		        System.out.println(line);
//		    }

		} catch (Exception e) {
		    e.printStackTrace();
		}
	}
	
	private static void exitBat() {
		System.out.println("<<<<<<<<<< LAUNCHER BATCH END >>>>>>>>>>>>\n");
		Loger.info("<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>");
		Loger.info("<<<<<<<<<<<<< LAUNCHER BATCH END >>>>>>>>>>>>>");
		Loger.info("<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>");
		
		System.exit(0);
	}
	

}
