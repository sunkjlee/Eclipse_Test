package com.gnew.bat.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import com.gnew.bat.conf.Conf;
import com.gnew.bat.service.KeywordStatisticsImpl;
import com.gnew.bat.util.Loger;
import com.gnew.bat.util.Util;

public class BatchMain {
	
	private static final String DEFAULT_CONF_FILE = "./conf/conf.properties";
	private static final String DELETE = "1";
	private static final String EXIT = "1";
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Map<String,Object> mainArgs = new HashMap<String, Object>();
		
		try {
			System.out.println("<<<<<<<<<<<< GNEW_DB_BATCH START >>>>>>>>>>>>\n");
//			[실행 파일명] [conf파일 path] [시작일자] [종료일자] [*키워드구분] [*통계구분] [고객식별번호]
			for (int i =1; i<args.length; i++) {
				 switch (i) {
				 	case 0: 
		            	mainArgs.put("conf", DEFAULT_CONF_FILE);
		            	mainArgs.put("pgNm", args[i].toString().trim());
		            	break;
		            case 1: 
		            	mainArgs.put("conf", args[i].toString().trim());
		            	break;
		            case 2: 
		            	mainArgs.put("mode", args[i].toString().trim());
		            	break;
		            case 3: 
		            	mainArgs.put("sleepMode", args[i].toString().trim());
		            	break;
		            default:
		            	mainArgs.put("conf", DEFAULT_CONF_FILE);
		            	break; 
				 }
			 }
			
			 if (mainArgs.get("conf") == null ) {
				 mainArgs.put("conf",  DEFAULT_CONF_FILE);
			 }
				  
			Conf.init(mainArgs.get("conf").toString());
//			if (Conf.confValidCheck() == false) {
//				exitBat();
//			}
			// 1. >>>> End load Config 
			
			// 2. >>>> logger init
			Loger.init();
			Loger.info("<<<<<<<<<<<<<<<<< GNEW_DB_BATCH START >>>>>>>>>>>>>>>>>");
			Loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			
			KeywordStatisticsImpl  keywordStatisticsImpl = new KeywordStatisticsImpl();
 
			if (mainArgs.get("mode") != null && mainArgs.get("mode").toString().equals(Conf.MANUAL_MODE)) {
			
				BufferedReader inputInfo = new BufferedReader(new InputStreamReader(System.in));
				
				// Manual Mode
				while(!false) {
					System.out.println("\n\n******* GNEW_DB_BATCH ******");
		    		System.out.println(" 1. Run Continue...");
		    		System.out.println(" 2. END");
			    	System.out.println("******************************");
			    	System.out.print("[INPUT NUMBER >> ");
		    		char choice = inputInfo.readLine().charAt(0);
		    		
					if (choice == '1') {
							//  MANUAL_MODE : user input date batch 
							System.out.print("[1.INPUT START DATE(YYYYMMDD) >> ");
			    			mainArgs.put("startDt", inputInfo.readLine());
				    		
				    		System.out.print("[2.INPUT END DATE(YYYYMMDD) >> ");
				    		mainArgs.put("endDt", inputInfo.readLine());
				    			    		
			    			System.out.print("[3.INPUT KEYWORD TYPE(0:ALL, 1:KEYWORD, 2:USER_KEYWORD, 3:CALL) >> ");
			    			mainArgs.put("keywordType",inputInfo.readLine()); //0:ALL  , 1:POP  2:USER(관심/불만)
			    			
				    		System.out.print("[4.INPUT STATISTICS TYPE)(0:ALL, 1:SVCNB, 2:GEN_AGE, 3:AREA, 4:BIZ_NM) >> ");
				    		mainArgs.put("statiType", inputInfo.readLine());		//0:All, 1:svcnb(회선), 2:GENAGE(성별-연령(, 3:AREA(지역), 4:BIZ_NM(업종)
				    		
				    		System.out.print("[5.INPUT CUSTNB Code >> ");
				    		mainArgs.put("custNb",  inputInfo.readLine());
				    		
				    		if (batchProcessRun(keywordStatisticsImpl,mainArgs) == false) {
				    			exitBat();		
				    		}
				    		
				    }else if(choice == '2') {
		    			System.out.println("[GNEW_DB_BATCH Exit] >>>>>>>>>");
		    			System.out.println("******************************");
		    			exitBat();
		    			
		    		}else {
		    			System.out.println("Not defined choice Number!!!");
		    			
		    		}
				}
			}else {
				// Main Loop Start --
				if (mainArgs.get("sleepMode") != null && mainArgs.get("sleepMode").toString().equals(Conf.SLEEP_MODE)) {
					while(!false){
						// batch Mode
						batchProcessRun(keywordStatisticsImpl,mainArgs);
						
						//Check Exit Intercept   
						Conf.getExitChkVal(mainArgs.get("conf").toString());
						Loger.info("getExitChkVal : " + Conf.launcherExitChk);
						if (Conf.launcherExitChk.equals(EXIT)) {
							Loger.logPrint("[Exit-intercept] getExitChkVal= " +  Conf.launcherExitChk + " break..");
							// loop Exit
						    break;
						}
						Thread.sleep(Conf.launcherSleepSec * 1000); //1초 대기
					}
				}else {
					// batch Mode
					batchProcessRun(keywordStatisticsImpl,mainArgs);
				}
				exitBat();
			}
		} catch (Exception ex) {
			//ex.printStackTrace();
			if (Loger.isErrorable()) {
				//ERR_TYPE
				Loger.error("main - ", ex);
			}else {
				// conf.path err.. log file err
				System.out.println("[Exception]Config File not Founded~~~\n");
				System.out.println("[Exception]Config File path : "+ mainArgs.get("conf").toString() + "\n");
			}
		} 
	}

	
	private static boolean batchProcessRun(KeywordStatisticsImpl keywordStatisticsImpl, Map<String, Object> mainArgs ) {
		// param input
		Map<String,Object> param = new HashMap<String, Object>();
		param.put("regUser", Conf.regUser != null ? Conf.regUser : "BAT");		 
		param.put("custNb", mainArgs.get("custNb") != null ? mainArgs.get("custNb").toString() : null);		//cuntNb
		
		// startDt Default  
		if (mainArgs.get("startDt") == null) {
			// statDate default = curdate -1 (previous Date)  
			param.put("statDate", Util.getPreviousDate());		// 00:01분에 전날 data 기본 배치 수행 yyyyMMdd
		}else {
			//date type Validation Err check  
			if( Util.getDate(Util.toDate2(mainArgs.get("startDt").toString())) == "") {
				Loger.error("[Batch Param] Check Start Date Parameter(yyyyMMdd)");
				return false;
			}
			param.put("statDate",  mainArgs.get("startDt").toString()); 
		}
		
		//종료일자 처리 
		if (mainArgs.get("endDt") == null) {
			// input endDt  = statDate + 1 
			//param.put("endDt", Util.getNextDate(param.get("statDate").toString()));  
			param.put("endDt", param.get("statDate").toString());
		}else {
			if( Util.getDate(Util.toDate2(mainArgs.get("endDt").toString())) == "") {
				Loger.error("[Batch Param] Check EndDate Date Parameter(yyyyMMdd)");
				return false;
			}
			param.put("endDt",  mainArgs.get("endDt").toString()); 
		}
		
		// keyword type , stati type 
		param.put("keywordType", "");
		param.put("statiType", "");
		
		if (mainArgs.get("keywordType") == null 		// All Keyword Type 
			|| mainArgs.get("keywordType").toString().equals(Conf.ALL_KEYWORD)){
			param.put("keywordType", Conf.ALL_KEYWORD);
			param.put("statiType", funTypeCheck(mainArgs));
		
		}else if(mainArgs.get("keywordType").toString().equals(Conf.POP_KEYWORD)) {		
			param.put("keywordType", Conf.POP_KEYWORD);  // // Only POP KEYWORD
			param.put("statiType", funTypeCheck(mainArgs));
			
		}else if(mainArgs.get("keywordType").toString().equals(Conf.USER_KEYWORD)) {		
			param.put("keywordType", Conf.USER_KEYWORD);  // Only USER_KEYWORD (관심/불만)
			param.put("statiType", funTypeCheck(mainArgs));
		// 콜건수 활성화시 주석해제 
		}else if(mainArgs.get("keywordType").toString().equals(Conf.CALL_CNT)) {		
			param.put("keywordType", Conf.CALL_CNT);  // Only call_count (콜건수)
			param.put("statiType", funTypeCheck(mainArgs));
		// KEYWORD TYPE 추가 되면 여기에 추가 
		} else {
			// keyword Type validation check Err
			Loger.error("[Batch Param] Check Keyword Type Parameter(0 ~ " + Conf.KEYWORD_TYPE_MAX + ")");
			return false;
		}
		
		/* 기간으로 배치 수행 시  start */
		try {
			SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
			Date startDate = formatter.parse((String)param.get("statDate"));
			Date endDate = formatter.parse((String)param.get("endDt"));   // endDt +1 일을 한 기간을 더할지 고민 해보자 ... 
			Calendar calStartDt = Calendar.getInstance();
			calStartDt.setTime(startDate);
			Calendar calEndDt = Calendar.getInstance();
			calEndDt.setTime(endDate);
			calEndDt.add(Calendar.DATE, 1);		// 해당 종료일자까지 수행위해(입력받은 종료일자 +1)
			
			// startDate ~ endDate batch Run
			for (Date curDate = calStartDt.getTime(); calStartDt.before(calEndDt); calStartDt.add(Calendar.DATE, 1), curDate = calStartDt.getTime()) {
			    // 수행일자 갱신
				param.put("statDate",Util.getDate(curDate));
				
				Loger.logPrint("<<<<<<<<<<<<< [ Batch Start Date : " + param.get("statDate") + " - " + param.get("custNb") + " ] >>>>>>>>>>>>>>");
				
				// 이쪽은 세는거 없이 이대로 진행.. GOGO(검증완료) - refactoring complated
				if (param.get("statiType").toString().equals(Conf.STAT_ALL)) {
					// execute All keyword Type - All stati Type 
					keywordStatisticsImpl.createStatisticsDayAll(param);
				}else if(param.get("keywordType").toString().equals(Conf.ALL_KEYWORD)) {
					// execute All keyword Type - Only one stati Type(svcnb, genAge, area, bizNm) 
					keywordStatisticsImpl.createStatisticsDayAllStatPartial(param);
				}else {
					// execute One keyword Type (pop, user,?) - One stati Type(svcnb, genAge, area, bizNm) (non Loop) 
					keywordStatisticsImpl.createStatisticsDay(param);
				}
				// 디렉터리 삭제- auto: 수행일자 -n day 삭제 , manual: 입력일자 ~ 종료일자 까지 -n day 삭제   
				deleteEncFileMonth(keywordStatisticsImpl, param.get("statDate").toString());
			}
		} catch (Exception ex) {
			//ex.printStackTrace();
			if (Loger.isErrorable()) {
				//ERR_TYPE
				Loger.error("main-batchProcessRun ", ex);
			}else {
				// conf.path err.. log file err
				System.out.println("[Exception]batchProcessRun Err");
				ex.printStackTrace();
			}
		} 
		
		return true;
	}
	
	private static String funTypeCheck (Map<String, Object> param ) {
		String rstStr = "";
		if (param.get("statiType") == null 
			|| param.get("statiType").toString().equals(Conf.STAT_ALL)) {
			
			rstStr = Conf.STAT_ALL;
			
		}else if (param.get("statiType").toString().equals(Conf.SVCNB)
				|| param.get("statiType").toString().equals(Conf.GEN_AGE)
				|| param.get("statiType").toString().equals(Conf.AREA)
				|| param.get("statiType").toString().equals(Conf.BIZ_NM)){
			
			rstStr = param.get("statiType").toString();
			
		}else {
			Loger.error("[Batch Param] Check Statics Type Parameter(0 ~ 4");
			exitBat();
		}
		return rstStr;
	}
	
	private static void deleteEncFileMonth (KeywordStatisticsImpl keywordStatisticsImpl, String startDate) {
		//배치 실행 일자 기준 30일 전의 폴더를 찾아서 폴더 체로 지운다. 
		String delTargetDir = "";
		int delPeriod = 0;
		
		// Only java delete mode :1  - 작은거로 찾아서 지우는 거작업 필요...
		if(Conf.encFileDelChk != null && Conf.encFileDelChk.equals(Conf.DELETE_MODE) ) {
			if(Conf.encFileDelChk.equals(DELETE)) {
				delPeriod = Integer.parseInt(Conf.delPeriodDay.toString());
//				Integer.parseInt((String)Conf.delPeriodDay);
				// 파일 삭제할 path 
				delTargetDir = Conf.encFilePath + File.separator + Util.getPreviousDate(startDate, delPeriod);
				// 폴더 전체 삭제 -  
				if (!keywordStatisticsImpl.deleteFolder(delTargetDir)) {
				   Loger.error("-deleteEncFileMonth Err~~");	
				}
			}
		}
	}	
	
	private static void exitBat() {
		System.out.println("<<<<<<<<<< GNEW_DB_BATCH END >>>>>>>>>>>>\n");
		Loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>");
		Loger.info("<<<<<<<<<<<<<<<<< GNEW_DB_BATCH END >>>>>>>>>>>>>>>>>");
		Loger.info("<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>");
		System.exit(0);
	}
		
}
